{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/zubba/OneDrive/projects/ai-pdf-note-taker/app/api/pdf-loader/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { WebPDFLoader } from \"@langchain/community/document_loaders/web/pdf\";\r\nimport { RecursiveCharacterTextSplitter } from \"@langchain/textsplitters\";\r\n\r\nexport async function GET(req) {\r\n  try {\r\n    const reqUrl = req.url;\r\n    const { searchParams } = new URL(reqUrl);\r\n    const pdfUrl = searchParams.get(\"pdfUrl\");\r\n\r\n    if (!pdfUrl) {\r\n      console.error(\"No PDF URL provided\");\r\n      return NextResponse.json({ error: \"No PDF URL provided\" }, { status: 400 });\r\n    }\r\n\r\n    // Fetch the PDF file\r\n    let response;\r\n    try {\r\n      response = await fetch(pdfUrl);\r\n      if (!response.ok) {\r\n        console.error(\"Failed to fetch PDF:\", response.statusText);\r\n        return NextResponse.json({ error: \"Failed to fetch PDF\" }, { status: response.status });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching PDF:\", error);\r\n      return NextResponse.json({ error: \"Error fetching PDF\" }, { status: 500 });\r\n    }\r\n\r\n    // Load the PDF\r\n    let docs;\r\n    try {\r\n      const data = await response.blob();\r\n      const loader = new WebPDFLoader(data);\r\n      docs = await loader.load();\r\n    } catch (error) {\r\n      console.error(\"Error loading PDF:\", error);\r\n      return NextResponse.json({ error: \"Error loading PDF\" }, { status: 500 });\r\n    }\r\n\r\n    // Combine text content\r\n    let pdfTextContent = \"\";\r\n    docs.forEach((doc) => {\r\n      pdfTextContent += doc.pageContent;\r\n    });\r\n\r\n    if (!pdfTextContent) {\r\n      console.error(\"No text content extracted from PDF\");\r\n      return NextResponse.json({ error: \"No text content extracted from PDF\" }, { status: 500 });\r\n    }\r\n\r\n    // Split the text into chunks\r\n    const textSplitter = new RecursiveCharacterTextSplitter({\r\n      chunkSize: 100,\r\n      chunkOverlap: 20,\r\n    });\r\n\r\n    let output;\r\n    try {\r\n      output = await textSplitter.createDocuments([pdfTextContent]);\r\n    } catch (error) {\r\n      console.error(\"Error splitting text:\", error);\r\n      return NextResponse.json({ error: \"Error splitting text\" }, { status: 500 });\r\n    }\r\n\r\n    const splitterList = output.map((doc) => doc.pageContent);\r\n\r\n    // Return the output as a JSON response\r\n    return NextResponse.json({ result: splitterList });\r\n  } catch (error) {\r\n    console.error(\"Unexpected error:\", error);\r\n    return NextResponse.json({ error: \"Failed to process PDF\" }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEO,eAAe,IAAI,GAAG;IAC3B,IAAI;QACF,MAAM,SAAS,IAAI,GAAG;QACtB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI;QACjC,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,qBAAqB;QACrB,IAAI;QACJ,IAAI;YACF,WAAW,MAAM,MAAM;YACvB,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,QAAQ,KAAK,CAAC,wBAAwB,SAAS,UAAU;gBACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAsB,GAAG;oBAAE,QAAQ,SAAS,MAAM;gBAAC;YACvF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uBAAuB;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,eAAe;QACf,IAAI;QACJ,IAAI;YACF,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,MAAM,SAAS,IAAI,oLAAA,CAAA,eAAY,CAAC;YAChC,OAAO,MAAM,OAAO,IAAI;QAC1B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,sBAAsB;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,uBAAuB;QACvB,IAAI,iBAAiB;QACrB,KAAK,OAAO,CAAC,CAAC;YACZ,kBAAkB,IAAI,WAAW;QACnC;QAEA,IAAI,CAAC,gBAAgB;YACnB,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqC,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,6BAA6B;QAC7B,MAAM,eAAe,IAAI,uKAAA,CAAA,iCAA8B,CAAC;YACtD,WAAW;YACX,cAAc;QAChB;QAEA,IAAI;QACJ,IAAI;YACF,SAAS,MAAM,aAAa,eAAe,CAAC;gBAAC;aAAe;QAC9D,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,MAAM,eAAe,OAAO,GAAG,CAAC,CAAC,MAAQ,IAAI,WAAW;QAExD,uCAAuC;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;QAAa;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}